     1                                  %include "stud_io.inc"
     1                              <1> ;; File stud_io.inc for both Linux and FreeBSD.
     2                              <1> ;;
     3                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009, 2015, 2017
     4                              <1> ;;
     5                              <1> ;; I, the author, hereby grant everyone the right to use this file for any
     6                              <1> ;; purpose, in any manner, in it's original or modified form, provided that
     7                              <1> ;; modified versions are clearly marked as such AND the original author's
     8                              <1> ;; copyright notice is kept along with the other authors' copyright notices
     9                              <1> ;; as appropriate within the file.
    10                              <1> ;;
    11                              <1> ;; Only the file as such must retain the copyright notice.  Programs created
    12                              <1> ;; using this file (e.g. binaries) don't need to have any mentions of the fact
    13                              <1> ;; this file was used to create them.
    14                              <1> ;; 
    15                              <1> ;; This file is provided as is, with absolutely NO WARRANTY, and this
    16                              <1> ;; statement must be taken literally: "NO" means "NO", period.  Should
    17                              <1> ;; this needs additional clarifications, I'd like you to search Internet
    18                              <1> ;; for various types of warranty (e.g., implied, hidden, etc) and take
    19                              <1> ;; into account that you don't have them all.
    20                              <1> ;;
    21                              <1> 
    22                              <1> %define STUD_IO_LINUX
    23                              <1> ;%define STUD_IO_FREEBSD
    24                              <1> 
    25                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    26                              <1> ;; system dependend part
    27                              <1> 
    28                              <1> %ifdef STUD_IO_LINUX
    29                              <1> 
    30                              <1> ; generic 3-param syscall
    31                              <1> %macro _syscall_3 4
    32                              <1> 	push edx
    33                              <1> 	push ecx
    34                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    35                              <1> 	push %1
    36                              <1> 	push %2
    37                              <1> 	push %3
    38                              <1> 	push %4
    39                              <1> 	pop edx
    40                              <1> 	pop ecx
    41                              <1> 	pop ebx
    42                              <1> 	pop eax 
    43                              <1> 	int 0x80
    44                              <1> 	pop ebx
    45                              <1> 	pop ecx
    46                              <1> 	pop edx
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    50                              <1> %macro _syscall_exit 1
    51                              <1> 	mov ebx, %1	; exit code
    52                              <1> 	mov eax, 1	; 1 = sys_exit
    53                              <1> 	int 0x80
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %elifdef STUD_IO_FREEBSD
    57                              <1> 
    58                              <1> ; generic 3-param syscall
    59                              <1> %macro _syscall_3 4
    60                              <1> 	push	%4
    61                              <1> 	push	%3
    62                              <1> 	push	%2
    63                              <1> 	mov	eax, %1
    64                              <1> 	push	eax
    65                              <1> 	int	0x80
    66                              <1> 	add	esp, 16
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro _syscall_exit 1
    70                              <1> 	push	%1	; exit code
    71                              <1> 	mov	eax, 1	; 1 = sys_exit
    72                              <1> 	push	eax
    73                              <1> 	int	0x80
    74                              <1> 	; no cleanup - this will never return anyway
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %else
    78                              <1> %error You must define either STUD_IO_LINUX or STUD_IO_FREEBSD
    79                              <1> %endif
    80                              <1> 
    81                              <1> ;; system dependent part ends here
    82                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    83                              <1> 
    84                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    85                              <1> ; output: eax: read bytes
    86                              <1> %macro _syscall_read 3
    87                              <1> 	_syscall_3 3,%1,%2,%3
    88                              <1> %endmacro
    89                              <1> 
    90                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    91                              <1> ; output: eax: written bytes
    92                              <1> %macro _syscall_write 3
    93                              <1> 	_syscall_3 4,%1,%2,%3
    94                              <1> %endmacro
    95                              <1> 
    96                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    97                              <1> %macro 	PRINT 1
    98                              <1> 	pusha
    99                              <1> 	pushf
   100                              <1> 	jmp %%astr
   101                              <1> %%str	db	%1
   102                              <1> %%strln	equ	$-%%str
   103                              <1> %%astr:	_syscall_write 1, %%str, %%strln
   104                              <1> 	popf
   105                              <1> 	popa
   106                              <1> %endmacro
   107                              <1> 
   108                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   109                              <1> %macro	PUTCHAR 1
   110                              <1> 	pusha
   111                              <1> 	pushf
   112                              <1> %ifstr %1
   113                              <1> 	mov	al, %1
   114                              <1> %elifnum %1
   115                              <1> 	mov	al, %1
   116                              <1> %elifidni %1,al
   117                              <1> 	nop
   118                              <1> %elifidni %1,ah
   119                              <1> 	mov	al, ah
   120                              <1> %elifidni %1,bl
   121                              <1> 	mov	al, bl
   122                              <1> %elifidni %1,bh
   123                              <1> 	mov	al, bh
   124                              <1> %elifidni %1,cl
   125                              <1> 	mov	al, cl
   126                              <1> %elifidni %1,ch
   127                              <1> 	mov	al, ch
   128                              <1> %elifidni %1,dl
   129                              <1> 	mov	al, dl
   130                              <1> %elifidni %1,dh
   131                              <1> 	mov	al, dh
   132                              <1> %else
   133                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
   134                              <1> %endif
   135                              <1> 	sub	esp, 4  ; reserve memory for buffer
   136                              <1> 	mov	edi, esp
   137                              <1> 	mov	[edi], al
   138                              <1> 	_syscall_write 1, edi, 1
   139                              <1> 	add	esp, 4
   140                              <1> 	popf
   141                              <1> 	popa
   142                              <1> %endmacro
   143                              <1> 
   144                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   145                              <1> %macro	GETCHAR 0
   146                              <1> 	pushf
   147                              <1> 	push	edi
   148                              <1> 	sub	esp, 4
   149                              <1> 	mov	edi, esp
   150                              <1> 	_syscall_read 0, edi, 1
   151                              <1> 	cmp	eax, 1
   152                              <1> 	jne	%%eof_reached
   153                              <1> 	xor	eax, eax
   154                              <1> 	mov	al, [edi]
   155                              <1> 	jmp	%%gcquit
   156                              <1> %%eof_reached:
   157                              <1> 	xor	eax, eax
   158                              <1> 	not	eax 		; eax := -1
   159                              <1> %%gcquit:
   160                              <1> 	add	esp, 4
   161                              <1> 	pop	edi
   162                              <1> 	popf
   163                              <1> %endmacro
   164                              <1> 
   165                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   166                              <1> %macro FINISH 0-1 0
   167                              <1> 	_syscall_exit %1
   168                              <1> %endmacro
     2                                  global _start
     3                                  
     4                                  section .bss
     5 00000000 <res 00000005>          nums resb 5			; arr of 1 byte nums
     6                                  
     7                                  section .text
     8 00000000 BB05000000              _start: mov ebx, 5		; amount of numbers to print
     9 00000005 B034                    	mov al, 52		; ascii code for first num in arr
    10                                  			
    11 00000007 8881[00000000]          addNum: mov [nums+ecx], al	; put number inside nums arr
    12 0000000D 40                      	inc eax			; get ascii of next number
    13 0000000E 41                              inc ecx			; inc ecx
    14 0000000F 39D9                    	cmp ecx, ebx		; compare current iteration with total amount of nums
    15 00000011 7CF4                            jl addNum		; if less than total start from "addNum" again
    16                                  			
    17 00000013 BE[00000000]            	mov esi, nums		; move address of nums to esi
    18 00000018 8A06                    printN: mov al, [esi]		; move num from arr to al
    19                                  	PUTCHAR al		; print current number
    19 0000001A 60                  <1>  pusha
    19 0000001B 9C                  <1>  pushf
    19                              <1> %ifstr %1
    19                              <1>  mov al, %1
    19                              <1> %elifnum %1
    19                              <1>  mov al, %1
    19                              <1> %elifidni %1,al
    19 0000001C 90                  <1>  nop
    19                              <1> %elifidni %1,ah
    19                              <1>  mov al, ah
    19                              <1> %elifidni %1,bl
    19                              <1>  mov al, bl
    19                              <1> %elifidni %1,bh
    19                              <1>  mov al, bh
    19                              <1> %elifidni %1,cl
    19                              <1>  mov al, cl
    19                              <1> %elifidni %1,ch
    19                              <1>  mov al, ch
    19                              <1> %elifidni %1,dl
    19                              <1>  mov al, dl
    19                              <1> %elifidni %1,dh
    19                              <1>  mov al, dh
    19                              <1> %else
    19                              <1>  mov al, %1
    19                              <1> %endif
    19 0000001D 83EC04              <1>  sub esp, 4
    19 00000020 89E7                <1>  mov edi, esp
    19 00000022 8807                <1>  mov [edi], al
    19                              <1>  _syscall_write 1, edi, 1
    19                              <2>  _syscall_3 4,%1,%2,%3
    19 00000024 52                  <3>  push edx
    19 00000025 51                  <3>  push ecx
    19 00000026 53                  <3>  push ebx
    19 00000027 6A04                <3>  push %1
    19 00000029 6A01                <3>  push %2
    19 0000002B 57                  <3>  push %3
    19 0000002C 6A01                <3>  push %4
    19 0000002E 5A                  <3>  pop edx
    19 0000002F 59                  <3>  pop ecx
    19 00000030 5B                  <3>  pop ebx
    19 00000031 58                  <3>  pop eax
    19 00000032 CD80                <3>  int 0x80
    19 00000034 5B                  <3>  pop ebx
    19 00000035 59                  <3>  pop ecx
    19 00000036 5A                  <3>  pop edx
    19 00000037 83C404              <1>  add esp, 4
    19 0000003A 9D                  <1>  popf
    19 0000003B 61                  <1>  popa
    20                                  	PUTCHAR 32		; print space
    20 0000003C 60                  <1>  pusha
    20 0000003D 9C                  <1>  pushf
    20                              <1> %ifstr %1
    20                              <1>  mov al, %1
    20                              <1> %elifnum %1
    20 0000003E B020                <1>  mov al, %1
    20                              <1> %elifidni %1,al
    20                              <1>  nop
    20                              <1> %elifidni %1,ah
    20                              <1>  mov al, ah
    20                              <1> %elifidni %1,bl
    20                              <1>  mov al, bl
    20                              <1> %elifidni %1,bh
    20                              <1>  mov al, bh
    20                              <1> %elifidni %1,cl
    20                              <1>  mov al, cl
    20                              <1> %elifidni %1,ch
    20                              <1>  mov al, ch
    20                              <1> %elifidni %1,dl
    20                              <1>  mov al, dl
    20                              <1> %elifidni %1,dh
    20                              <1>  mov al, dh
    20                              <1> %else
    20                              <1>  mov al, %1
    20                              <1> %endif
    20 00000040 83EC04              <1>  sub esp, 4
    20 00000043 89E7                <1>  mov edi, esp
    20 00000045 8807                <1>  mov [edi], al
    20                              <1>  _syscall_write 1, edi, 1
    20                              <2>  _syscall_3 4,%1,%2,%3
    20 00000047 52                  <3>  push edx
    20 00000048 51                  <3>  push ecx
    20 00000049 53                  <3>  push ebx
    20 0000004A 6A04                <3>  push %1
    20 0000004C 6A01                <3>  push %2
    20 0000004E 57                  <3>  push %3
    20 0000004F 6A01                <3>  push %4
    20 00000051 5A                  <3>  pop edx
    20 00000052 59                  <3>  pop ecx
    20 00000053 5B                  <3>  pop ebx
    20 00000054 58                  <3>  pop eax
    20 00000055 CD80                <3>  int 0x80
    20 00000057 5B                  <3>  pop ebx
    20 00000058 59                  <3>  pop ecx
    20 00000059 5A                  <3>  pop edx
    20 0000005A 83C404              <1>  add esp, 4
    20 0000005D 9D                  <1>  popf
    20 0000005E 61                  <1>  popa
    21 0000005F 46                      	inc esi			; put address of the next RAM cell into edi
    22 00000060 E2B6                    	loop printN		; dec ecx and if zero jump to "printN"
    23                                  			
    24                                  	PUTCHAR 10		; print end of line symbol
    24 00000062 60                  <1>  pusha
    24 00000063 9C                  <1>  pushf
    24                              <1> %ifstr %1
    24                              <1>  mov al, %1
    24                              <1> %elifnum %1
    24 00000064 B00A                <1>  mov al, %1
    24                              <1> %elifidni %1,al
    24                              <1>  nop
    24                              <1> %elifidni %1,ah
    24                              <1>  mov al, ah
    24                              <1> %elifidni %1,bl
    24                              <1>  mov al, bl
    24                              <1> %elifidni %1,bh
    24                              <1>  mov al, bh
    24                              <1> %elifidni %1,cl
    24                              <1>  mov al, cl
    24                              <1> %elifidni %1,ch
    24                              <1>  mov al, ch
    24                              <1> %elifidni %1,dl
    24                              <1>  mov al, dl
    24                              <1> %elifidni %1,dh
    24                              <1>  mov al, dh
    24                              <1> %else
    24                              <1>  mov al, %1
    24                              <1> %endif
    24 00000066 83EC04              <1>  sub esp, 4
    24 00000069 89E7                <1>  mov edi, esp
    24 0000006B 8807                <1>  mov [edi], al
    24                              <1>  _syscall_write 1, edi, 1
    24                              <2>  _syscall_3 4,%1,%2,%3
    24 0000006D 52                  <3>  push edx
    24 0000006E 51                  <3>  push ecx
    24 0000006F 53                  <3>  push ebx
    24 00000070 6A04                <3>  push %1
    24 00000072 6A01                <3>  push %2
    24 00000074 57                  <3>  push %3
    24 00000075 6A01                <3>  push %4
    24 00000077 5A                  <3>  pop edx
    24 00000078 59                  <3>  pop ecx
    24 00000079 5B                  <3>  pop ebx
    24 0000007A 58                  <3>  pop eax
    24 0000007B CD80                <3>  int 0x80
    24 0000007D 5B                  <3>  pop ebx
    24 0000007E 59                  <3>  pop ecx
    24 0000007F 5A                  <3>  pop edx
    24 00000080 83C404              <1>  add esp, 4
    24 00000083 9D                  <1>  popf
    24 00000084 61                  <1>  popa
    25                                          FINISH			; sys call for exit
    25                              <1>  _syscall_exit %1
    25 00000085 BB00000000          <2>  mov ebx, %1
    25 0000008A B801000000          <2>  mov eax, 1
    25 0000008F CD80                <2>  int 0x80
